{"version":3,"sources":["hooks/useCounter.ts","hooks/useHeavyEvaluations.ts","components/ui/spinner.tsx","components/heavy-component/heavy-component.tsx","hooks/useShouldRender.ts","components/app/app.component.tsx","components/menu/menu.component.tsx","reportWebVitals.ts","index.tsx"],"names":["useCounter","init","useRef","defaultProps","duration","withLog","defaultValues","rotation","keyframes","Spinner","styled","i","props","size","Component","counter","LazyHeavyComponent","lazy","Promise","resolve","setTimeout","default","HeavyComponentLazy","fallback","children","HeavyComponent","heavyResult","rerender","useState","targetTime","Date","now","isDone","useEffect","console","log","current","useHeavyEvaluations","deps","isDepsResolved","every","dep","shouldRender","setShouldRender","useShouldRender","StyledApp","section","borders","css","Header","header","Main","main","Sidepanel","aside","Content","Footer","App","path","component","StyledLink","Link","StyledSection","Menu","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.264be8f0.chunk.js","sourcesContent":["import { useRef } from 'react'\n\nexport const useCounter = (init = 0) => useRef(init)\n","import { useState, useEffect } from 'react'\nimport { useCounter } from './useCounter'\n\ntype Hook = (props?: { duration?: number; withLog?: boolean }) => () => boolean\n\nconst defaultProps = { duration: 1, withLog: true }\n\nexport const useHeavyEvaluations: Hook = (props = defaultProps) => {\n\tconst { duration, withLog } = { ...defaultProps, ...props }\n\tconst rerender = useState(false)\n\tconst targetTime = useState(Date.now() + duration * 1000)[0]\n\tconst counter = useCounter()\n\tconst isDone = 0 <= Date.now() - targetTime\n\n\tuseEffect(() => {\n\t\tif (isDone) return\n\t\tif (withLog) console.log('useHeavyEvaluations : ', ++counter.current)\n\n\t\tsetTimeout(() => rerender[1](!rerender[0]))\n\t}, [rerender, isDone, counter, withLog])\n\n\treturn () => isDone\n}\n","import styled, { keyframes } from 'styled-components'\n\n// This component is loaded dynamically\ninterface IProps {\n\tsize?: string\n\tspeed?: number\n}\n\nconst defaultValues = {\n\tsize: 5,\n\tspeed: 2\n}\n\nconst rotation = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nexport const Spinner = styled.i<IProps>`\n\tdisplay: flex;\n\tanimation: ${rotation} ${defaultValues.speed}s infinite linear;\n\t--size: ${(props) => props.size || defaultValues.size}rem;\n\tfont-size: var(--size);\n\twidth: var(--size);\n\theight: var(--size);\n\n\ttext-align: center;\n\tjustify-content: center;\n\talign-items: center;\n\tfont-style: initial;\n`\n","import { Suspense, lazy } from 'react'\nimport { useHeavyEvaluations, useShouldRender, useCounter } from 'hooks'\nimport { Spinner } from 'components/ui'\n\ntype TProps = { counter?: number | false }\nconst Component = ({ counter = false }: TProps) => (\n\t<div>\n\t\t<p>HeavyComponent{counter && `counter = ${counter}`}</p>\n\t</div>\n)\n\ntype TPromise = { default: React.FunctionComponent<TProps> }\nconst importHeavyComponent = (): Promise<TPromise> =>\n\tnew Promise((resolve) => {\n\t\tsetTimeout(() => resolve({ default: Component }), 5000)\n\t})\n\nconst LazyHeavyComponent = lazy(() => importHeavyComponent())\n\nexport const HeavyComponentLazy = () => (\n\t<Suspense fallback={<Spinner children=\"‚ôΩ\" />}>\n\t\t<LazyHeavyComponent />\n\t</Suspense>\n)\n\nexport const HeavyComponent = () => {\n\tconst heavyResult = useHeavyEvaluations({ duration: 3 })\n\tconst counter = useCounter(0)\n\tconst shouldRender = useShouldRender(heavyResult)\n\n\treturn shouldRender && <Component counter={++counter.current} />\n}\n","import { useState } from 'react'\n\ntype Dependency = boolean | (() => boolean)\ntype Dependencies = Dependency[]\n\nexport const useShouldRender = (...deps: Dependencies) => {\n\tconst isDepsResolved = deps.every((dep) => (typeof dep === 'boolean' ? dep : dep()))\n\tconst [shouldRender, setShouldRender] = useState<Boolean>(isDepsResolved)\n\n\tif (!shouldRender && isDepsResolved) {\n\t\tsetShouldRender(true)\n\t}\n\n\treturn shouldRender\n}\n","import { Switch, Route } from 'react-router-dom'\nimport styled, { css } from 'styled-components'\nimport { HeavyComponent, HeavyComponentLazy, Menu } from 'components'\n\nconst StyledApp = styled.section`\n\tbackground-color: #282c34;\n\tmin-height: 100vh;\n\tdisplay: flex;\n\tflex-direction: column;\n\tfont-size: calc(10px + 2vmin);\n\tcolor: white;\n\tpadding: 0 5vw 0;\n`\nconst borders = css`\n\tborder: 1px solid white;\n`\nconst Header = styled.header`\n\tmin-height: 10vh;\n\ttext-align: center;\n\t${borders}\n`\n\nconst Main = styled.main`\n\tflex-grow: 1;\n\tdisplay: flex;\n\t${borders}\n`\n\nconst Sidepanel = styled.aside`\n\tmax-width: 30vw;\n\tpadding: 1vh;\n\t${borders}\n`\n\nconst Content = styled.header`\n\tpadding-left: 10vw;\n\tflex-grow: 1;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-content: flex-start;\n\t${borders}\n`\n\nconst Footer = styled.header`\n\tmin-height: 10vh;\n\t${borders}\n`\n\nexport const App = () => (\n\t<StyledApp>\n\t\t<Header>\n\t\t\t<p>React Hooks</p>\n\t\t</Header>\n\t\t<Main>\n\t\t\t<Sidepanel>\n\t\t\t\t<Menu />\n\t\t\t</Sidepanel>\n\t\t\t<Content>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/useShouldRender\" component={HeavyComponent} />\n\t\t\t\t\t<Route path=\"/heavyComponentSuspense\" component={HeavyComponentLazy} />\n\t\t\t\t\t<Route path=\"/\" />\n\t\t\t\t</Switch>\n\t\t\t</Content>\n\t\t</Main>\n\t\t<Footer />\n\t</StyledApp>\n)\n","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst StyledLink = styled(Link)`\n\ttext-decoration: none;\n\tcolor: wheat;\n\n\t&:hover {\n\t\tcolor: red;\n\t}\n`\n\nconst StyledSection = styled.section`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-content: flex-start;\n\n\t& > * {\n\t\tpadding-bottom: 1rem;\n\t}\n\t& > :last-child {\n\t\tpadding-bottom: initial;\n\t}\n`\n\nexport const Menu = () => (\n\t<StyledSection>\n\t\t<StyledLink to=\"/\">Home üè°</StyledLink>\n\t\t<StyledLink to=\"/useShouldRender\">useShouldRender</StyledLink>\n\t\t<StyledLink to=\"/heavyComponentSuspense\">HeavyComponent with Suspence</StyledLink>\n\t</StyledSection>\n)\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './index.css'\nimport { App } from 'components'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t<App />\n\t\t</Router>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}